// here we are using Error class of javascript , in node js 
// in nodejs we can use class but in react using class is nou out of fashion 


class ErrorHandler extends Error{
    constructor(message,statusCode)
    {
        super(message||"random")
        this.statusCode = statusCode;
        console.log("in error handler ,",message," status code is : ",statusCode);
    }
}

export const errorMiddleware = (err,req,res,next)=>{
    console.log("recieved error is L: ",err);
    err.message = err.message || "Internal Server Error",
    err.statusCode = err.statusCode || 500

    // now handeling some common error generated by db and designing response accordinghly 
    if(err.code === 11000)
    {
        const message = `Duplicate ${Object.keys(err.keyValue)} Entered`,
        err = new ErrorHandler(message,400);
    }

    if(err.name === "JsonWebTokenError")
    {
        err.message = "Json token is invalid ,Please try again  later",
        err = new ErrorHandler(message,400);
    }

    if(err.name === "TokenExpiredError")
    {
        err.message = "Json token is Expired ,Please try again  later",
        err = new ErrorHandler(message,400);
    }

    if(err.name === "CastError")
    {
        err.message = `Invalid  ${err.path}`,
        err = new ErrorHandler(message,400); 
    }

    const errorMessage = err.errors? Object.values((err.errors)).map(error=>error.message).join("  &&  "):err.message;

    // THis error handler will directly return to the client 
    return res.status(err.statusCode).json({
        success:false,
        message:errorMessage
    })

}


export default ErrorHandler;